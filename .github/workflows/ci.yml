name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Separate job for code formatting checks
  format-check:
    name: Code Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check code formatting
      run: npm run format:check

  # Separate job for linting checks
  lint-check:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run linting
      run: npm run lint

  # Main test job that depends on formatting and linting
  test:
    name: Tests and Build
    runs-on: ubuntu-latest
    needs: [format-check, lint-check]  # Only run if formatting and linting pass
    
    # Add PostgreSQL service for testing
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: expense_test_db
        ports:
          - 5432:5432
        # Health check to ensure postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    # Set environment variables for tests
    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/expense_test_db
      JWT_SECRET: test-jwt-secret-for-ci
      NODE_ENV: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Run database migrations
      run: npx prisma migrate deploy
    
    - name: Validate test coverage for new code
      run: |
        if npm run validate:tests 2>/dev/null; then
          echo "✅ Coverage validation passed"
        else
          echo "⚠️ Coverage validation script not found or failed, continuing..."
        fi
    
    - name: Run unit tests with coverage
      run: npm run test:ci
      
    - name: Check coverage thresholds
      run: |
        echo "Checking if coverage meets minimum requirements..."
        npm run test:required || { echo "❌ Coverage requirements not met"; exit 1; }
        
    - name: Validate all source files have tests
      run: |
        echo "Validating test coverage for all source files..."
        missing_tests=()
        
        # Check repository files
        for file in src/repositories/*.ts; do
          filename=$(basename "$file" .ts)
          if [ ! -f "tests/repositories/${filename}.test.ts" ]; then
            missing_tests+=("Repository: $file")
          fi
        done
        
        # Check route files (skip checking - routes are integration tested)
        echo "✅ Route files are integration tested, skipping unit test requirement"
        
        # Check utility files
        for file in src/utils/*.ts; do
          filename=$(basename "$file" .ts)
          if [ ! -f "tests/utils/${filename}.test.ts" ]; then
            missing_tests+=("Utility: $file")
          fi
        done
        
        # Skip app.ts and server.ts as they are entry points, not business logic
        echo "✅ Skipping app.ts and server.ts (entry points, integration tested)"
        
        if [ ${#missing_tests[@]} -gt 0 ]; then
          echo "❌ Missing tests for the following files:"
          printf '%s\n' "${missing_tests[@]}"
          echo ""
          echo "🚫 Repository and utility files must have corresponding unit tests!"
          echo "📝 Please create test files following the pattern: tests/<module>/<filename>.test.ts"
          exit 1
        else
          echo "✅ All required source files have corresponding test files!"
        fi
    
    - name: Run build
      run: npm run build
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
      continue-on-error: true

 