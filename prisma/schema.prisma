// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ───────────────────────
   Domain models
   ─────────────────────── */

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  username    String?  @unique // Optional username for display
  password    String?  // Nullable for OAuth users
  avatar      String?  // Profile picture URL
  phoneNumber String?  // Optional phone number
  
  // Authentication provider fields (for future OAuth support)
  provider    String   @default("local") // "local", "google", "facebook", etc.
  providerId  String?  // OAuth provider's user ID
  
  // Account status
  isEmailVerified Boolean @default(false)
  isActive        Boolean @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  expenses       Expense[]
  createdGroups  Group[]       @relation("GroupCreator")
  groupMembers   GroupMember[]
  expenseSplits  ExpenseSplit[]
  
  @@map("users")
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  avatar      String?  // Group avatar/image URL
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  createdBy   Int
  creator     User          @relation("GroupCreator", fields: [createdBy], references: [id])
  members     GroupMember[]
  expenses    Expense[]
  
  @@map("groups")
}

model GroupMember {
  id       Int           @id @default(autoincrement())
  role     GroupMemberRole @default(MEMBER)
  joinedAt DateTime      @default(now())
  
  // Relations
  groupId  Int
  userId   Int
  group    Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Ensure unique user per group
  @@unique([groupId, userId])
  @@map("group_members")
}

model Expense {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  // Optional expense description
  amount      Decimal
  paidAt      DateTime @default(now())
  
  // Relations
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  groupId     Int?     // Optional - expense can be personal or group
  group       Group?   @relation(fields: [groupId], references: [id])
  
  // New relation for expense splits
  splits      ExpenseSplit[]
  
  @@map("expenses")
}

model ExpenseSplit {
  id          Int         @id @default(autoincrement())
  amount      Decimal     // The amount this user owes for this expense
  splitType   SplitType   @default(EQUAL)
  percentage  Float?      // Only used for PERCENTAGE splits (0-100)
  isPaid      Boolean     @default(false) // Track if this split has been settled
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  expenseId   Int
  expense     Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  
  // Ensure unique split per user per expense
  @@unique([expenseId, userId])
  @@map("expense_splits")
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

enum SplitType {
  EQUAL       // Split equally among participants
  AMOUNT      // Split by specific amounts
  PERCENTAGE  // Split by percentages
}